/*! \page UserPanTilt Making a motorized pan-tilt head for JeVois and tracking objects


Several JeVois machine vision modules detect and locate target objects in video, either based on their visual salience,
on a specific color, on a specific type of shape (e.g., ArUco marker), or on a generic learned appearance. Some of these
modules issue messages to the JeVois serial ports that indicate the coordinates of the objects that were found (and
adding such messages to those which do not yet send them is a simple modification).

In this tutorial, we use a motorized pan-tilt head and a small Arduino-compatible board to control the pan-tilt head, so
that it will always try to center the detected object in the camera's field of view. That is, we will use the
coordinates issued by JeVois, to counter-rotate the pan-tilt head (onto which JeVois should be mounted) so as to center
the objects of interest. The net effect will be that JeVois mounted on the pan-tilt head will track the objects of
interest.

This tutorial is a direct extension, with more details, step-by-step instructions, and with pictures, of the \ref
ArduinoTutorial in the main JeVois documentation.

Getting started
---------------

For this tutorial, we will use:

- one JeVois smart camera;
- one pan/tilt head actuated by two standard servo-motors (bought on eBay or any robotics shop);
- one Arduino-compatible board with a 5V, 16MHz Atmega32u4 microcontroller. We use [this specific one]
(https://www.jevoisinc.com/collections/accessories/products/atmega32u4-16mhz-5v-arduino-compatible-micro-controller);
- one 5V power supply rated at least 2A for the servos.

\image html UserPanTiltMaterials.jpg

Basic plan of attack
--------------------

- We will power JeVois from a host computer using a mini-USB cable that will also let us see video from JeVois.

- We will power the servos and the Arduino board from the 5V power supply.

- We will connect the JeVois serial port (see \ref UserSerial) to the Arduino's hardware serial port (pins TX1 and
  RX0). On the Atmega 32u4, these pins are referred to as the \b Serial1 port.

- JeVois will send the coordinates of detected objects to the serial port.

- The Arduino will receive the coordinates and will pan and tilt the head so as to try to center the object in the field
  of view. That is, it will track the object.

Hardware work
-------------

- Assemble your pan-tilt head. Follow the instructions that came with it. This can take a while depending on which model
  you used.

- Get the [JeVois mounting template](http://jevois.org/data/jevois-dimensions.pdf) and print it at 100% scale.

- Cut out one of the pictures in the template in which you can see the 4 mounting holes on the underside of JeVois.

- Place the template on your pan-tilt head and drill 4 holes with a drill bit that is about 3mm in
  diameter. Alternatively, use the patterns described in \ref CaseMounting to place your mounting holes.

  \image html UserPanTiltTemplate.jpg
  \image html UserPanTiltDrill.jpg

- Find 4 screws (M2.5 or USA 2-56 recommended) with a length chosen so that they stick out by 5mm (not more!) through
  the mounting plate.

  \image html UserPanTiltScrews.jpg

- Screw your JeVois smart camera to the mounting plate. As you hold your JeVois smart camera while you also thread the
  screws in, always remember to never push onto the center of the fan of JeVois (see \ref Handling). Do not over-tighten
  or you will just end up making big holes in the feet of your JeVois and you will then just need to try again, with
  bigger diameter screws.

  \image html UserPanTiltMounted.jpg
  \image html UserPanTiltCamera.jpg

- Connect your JeVois micro-serial cable to your Arduino board as explained in \ref UserSerial. On our small ProMicro
  board used here, there is no IOREF pin, so we just use VCC instead to provide a reference 5V voltage to JeVois, to be
  used as the level at which serial communications will operate.

- Connect two wires to power your Arduino. Here we will use one black wire to GND and one red wire to VCC (since we will
  use a clean 5V power supply, we provide it directly to the Arduino's VCC and we bypass the RAW voltage
  input). Alternatively, you can power your Arduino from its micro-USB port (which we will do during programming), or
  you could use a 6V power supply (which will make your servos operate faster) and then connect that 6V to the RAW
  voltage supply pin of your Arduino (check specs of your Arduino to be sure).

  \image html UserPanTiltArdu1.jpg

- Following the \ref ArduinoTutorial, here we will connect the control line (yellow wire on our servos) of the pan servo
  to Arduino pin 3, and the control line of the tilt servo to pin 5. Any Arduino pin that supports PWM output would work
  (but you need to modify the Arduino code accordingly).

  \image html UserPanTiltArdu2.jpg
  \image html UserPanTiltArdu3.jpg

- Connect 4 power wires together: 1 from the power supply, two for the servos, and one for the Arduino. Repeat for the 4
  ground wires.

  \image html UserPanTiltArdu4.jpg

- Insulate using heat-shrink tubing to make sure there will be no shorts as this contraption starts jerking around at
  high speeds.

  \image html UserPanTiltArdu5.jpg

- Here, since we have so much room on the pan-tilt platform, we just tape the Arduino to is using double-stick tape (of
  the foamy type, for example Scotch 110P or 3M 4016). Just make sure you can still plug-in a micro-USB connector to
  program it. Here, we also use a zip tie through two holes that already were on the side of our pan-tilt head, to
  bundle and hold all the wires, so that we provide some strain relief (the solder joints will not be pulled upon as the
  head moves).

  \image html UserPanTiltFinal.jpg

- Plug in and check for sparks, burning smell, etc. If everything is quiet, you are ready to move on to the next step.

Programming the Arduino
-----------------------

- Launch the Arduino software

- Cut and paste the code below into the Arduino editor.

- Power your pan-tilt head and connect its Arduino to your programming desktop using a micro-USB cable. 

- Select the correct target board (ours is compatible with Arduino Leonardo) and programming port (ours is the Leonardo
  direct programming). Compile and upload the software to your Arduino.  \warning Your servos will move to their home
  position as soon as programming is complete, just be prepared for that.

- Disconnect your programming computer. Power off your pan-tilt head for now.

\includelineno ArduinoPanTiltTutorial.C

Arduino code analysis
---------------------

- Line 10: Make sure you select the correct serial port. On an Atmega 32u4 (used here), pins 0 and 1 are handled by \b
  Serial1 (since \b Serial is for the USB serial port). On Arduino Uno and similar, you would use \b Serial instead.

- Lines 31 - 45: We initialize the serial port, LED, and servos. We send a couple of commands to JeVois to instruct it
  to send \c serout messages to us and \c serlog messages to nobody.

- Line 49: We read a serial string until an end-of-line marker.

- Line 52: We split the first token from the received line, using space or some end of line character as token
  delimiter.

- Line 54: We iterate over all tokens contained in the line. We will parse each token according to our current state in
  a simple state machine. The states are described in lines 56-67. We start in state 0.

- Lines 68-84: Depending on state, we decode either a command or a number, and we switch to the appropriate next state,
  depending on what we have decoded so far.

- Lines 89-94: We update the pan angle if the received command contained a pan value. We update the angle by a small
  fraction of the target X coordinate that was received, so that the head will move slightly towards the target. We do
  not move fully towards the target because that would move the head too fast given that serial commands are going to be
  received at 30Hz, 60Hz or more (see comments in lines 19-22).

- Lines 96-101: Idem for tilt.

Tuning the pan-tilt head servo directions
-----------------------------------------

Depending on the construction of your pan-tilt head, increasing the pan angle may turn the head rightwards or leftwards,
and, likewise, increasing the tilt angle could turn the head up or down. To figure this out, we will first connect to
the pan-tilt head manually. We will send hand-written commands to the head.

Before you start this, make sure you understand the following:

- JeVois standardized coordinates. These are explained in \ref coordhelpers and are used by modules which output object
  coordinates over serial. The goal of using a standardized coordinate system is so that you do not have to modify your
  Arduino code when you change video resolution in JeVois.

- \ref UserCli, and, in particular:
  + Talking to JeVois using the serial-over-USB port
  + The \p serout and \p serlog parameters
  + The \c serout and \c serlog commands

Now let's try the following:

- Connect a mini-USB cable from a host computer to JeVois. Allow JeVois to boot up.

- Do not start a video capture software yet. Instead, connect to JeVois over the serial-over-USB connection.

- Issue the following command to configure the \b serout port to be the hardware 4-pin port of JeVois:

\verbatim
serpar serout Hard
\endverbatim

- Now let's move the pan-tilt head by hand. By default, it homes to standardized coordinates (0, 0). If we ask it to
  move to, say, (1000, 0), it should turn rightward. We will do that by using the \c serout command, which just forwards
  everything that is passed to it directly to the \b serout port. Hence, everything we type in a \c serout command will
  be sent to our Arduino.

  Note that the Arduino pan-tilt code is written to apply a small \a relative offset to a memorized pan-tilt location
  each time a serial command is received. Indeed, because the Arduino code will receive target coordinates up to 60
  times per second, it would be too jerky to try each time to fully home onto the target. So, instead, the pan-tilt head
  will take a small step towards the target. The size of these steps is regulated by two control parameters in the
  Arduino code, \p PANGAIN and \p TILTGAIN, with default values of 100. Higher gain values will move the head more
  rapidly towards the target on each video frame.

\verbatim
serout T2 10000 0
\endverbatim

As the command is received, the pan-tilt head should turn right by some amount. If it turns left, your pan gain should
be negated. The Arduino code supports two commands, in addition to T2: \c PANGAIN and \c TILTGAIN. You can negate \c
PANGAIN as follows if your pan-tilt head just turned left:

\verbatim
serout PANGAIN -100
\endverbatim

Then try again
\verbatim
serout T2 10000 0
\endverbatim

and the camera should now pan in the other direction than previously.

- Repeat this process to adjust the tilt direction, now using commands like:

\verbatim
serout T2 0 10000
\endverbatim

to tilt the camera up, and 

\verbatim
serout TILTGAIN -100
\endverbatim

Once you are done playing, make a note of what you did and you can later put these commands in a \b script.cfg file in
the directory of the machine vision module you will be using (see how we did that in \ref ArduinoTutorial).


Let's rock
----------

We are ready to get that pan-tilt head controlled by JeVois.

- Connect a mini-USB cable from JeVois to a host computer. Start a video capture software. Select one of the following:
  + YUYV 640x300 @ 60.0 fps - Demo Saliency
  + YUYV 320x254 @ 60.0 fps - Color-based Object Tracker
  + YUYV 640x312 @ 50.0 fps - Demo Saliency + Gist + Face + object recognition
  + any other that supports T2 or T1 serial outputs (see docs and/or source code an dlook for modules that support
    standardized serial messages).

- Show some interesting object to JeVois and watch it track it.

- You may want to increase the pan and tilt gains, which are very low by default. Higher values will move the pan-tilt
  head faster, so that it can better track fast-moving objects. The downside is that noisy inputs will also give rise to
  high jerky motions of the pan-tilt head.

  Try the following:
  
\verbatim
serout PANGAIN 500
\endverbatim

(or use -500 if you need a negative gain for your particular pan-tilt head). See how much faster the head can track now.


\youtube{3V3vsoQrFo0}

Running with no USB output
--------------------------

Once you are comfortable with the operation of the algorithm, you can also try it as a true standalone machine vision
system with no USB output. The steps are as follows:

- Select a machine vision algorithm that supports processing with no USB output. Not all of them do. From the list of
  \ref UserDemos, we can select, for example the [ObjectTracker](/moddoc/ObjectTracker/modinfo.html) and we see, towards
  the top of the page:
  \verbatim
  Supports mappings with NO USB output:   Yes
  \endverbatim
  An example video mapping with no USB output (with \b NONE as USB pixel format) is also suggested:
  \verbatim
  Video Mapping:   NONE 0 0 0.0 YUYV 320 240 60.0 JeVois ObjectTracker
  \endverbatim

- If you are operating in low light, you may want to select a lower framerate than the suggested 60fps, so that the
  camera sensor will be allowed longer exposure time. Here we will use 30fps.

- Let us first try interactively:
  + Power in the pan/tilt head
  + Connect JeVois to your host computer and allow it to boot
  + But do not start a video capture software
  + Connect to the JeVois command line interface as we have done above.
  + Issue the following:
    \verbatim
setmapping2 YUYV 320 240 30.0 JeVois ObjectTracker
setpar serout Hard
streamon
    \endverbatim
    which will load up the object tracker module and run it in the mode with no USB output. The \c setmapping2 command
    instructs JeVois to configure a given camera pixel format, resolution, and framerate, and to load the module
    ObjectTracker from Vendor JeVois. Because \c setmapping2 does not specify a USB output video format, the module will
    run with no USB video output. We then manually initiate video streaming using the \c streamon command when running
    with no USB output, because there is no video capture software that is going to initiate it. See \ref UserCli for
    details on \c setmapping2 and \c streamon.
  + Wave some object that was detected earlier in front of JeVois and your pan/tilt head should track it.

- Once this works, we can configure JeVois to do this automatically at boot up:

  + Assuming that you are using the latest microSD image, just type \c usbsd in the command line interface, and a
    virtual USB flash drive named \b JEVOIS should appear on your host computer. See \ref MicroSD for details, towards
    bottom of the page.
  + Open the file <b>JEVOIS:/jevois/config/initscript.cfg</b> and add these lines:
    \verbatim
setmapping2 YUYV 320 240 30.0 JeVois ObjectTracker
setpar serout Hard
streamon
    \endverbatim
    \b initscript.cfg is executed by JeVois when it boots up. You can put in there any command that is valid for the
    command-line interface of JeVois.
  + Save and close the file and eject the JEVOIS virtual flash drive (drag to trash, click eject button, etc).
    JeVois will reboot.
  + After a few seconds, it should now start with the color-based pan/tilt control with no USB video output.
  + From this point on, you do not need your host computer anymore. You can power JeVois from a USB charger, USB battery
    bank, etc.

\note Because we changed framerate here (from 60 fps while we were seeing the video over USB to 30 fps with no USB), the
color tracking algorithm may need re-tuning. If it does not appear to track well, first try with 60 fps in your \c
setmapping2 command, to match what we had before. You can then edit <b>JEVOIS:/config/videomapping.cfg</b> to change
the framerate of the mode with USB output: Search for \b ObjectTracker and change this entry:
\verbatim
YUYV 320 254 60.0 YUYV 320 240 60.0 JeVois ObjectTracker
\endverbatim
to
\verbatim
YUYV 320 254 30.0 YUYV 320 240 30.0 JeVois ObjectTracker
\endverbatim
and see \ref UserModes for details about the format of video mappings. Next time you start your video capture software,
be sure to select YUYV 320x254 at 30 fps.  Then have a look at \ref UserColorTracking for tuning. You can save your
tuned parameters to the file <b>JEVOIS:/modules/JeVois/ObjectTracker/script.cfg</b> as we did in this tutorial.


Additional activities
---------------------

- Try to play with the \c PANGAIN and \c TITLGAIN values. Notice how values that are too high will yield crazy
  oscillations of the pan-tilt head. Indeed, we only use a proportional control of the head. As an exercise, think about
  how you would modify the Arduino code to include a PID control (see for example
  https://en.wikipedia.org/wiki/PID_controller).

- As an exercise, try to modify another module you like to have it also issue \b T2 messages. Have a look at how it is
  done in, for example, ObjectTracker using \ref coordhelpers and the helper functions to send serial messages provided
  by jevois::Module, and try to replicate the commands in your new module.

*/

